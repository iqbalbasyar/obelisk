// Code generated by sqlc. DO NOT EDIT.
// source: assignment_ticket.sql

package db

import (
	"context"
	"database/sql"
)

const createAssignmentTicket = `-- name: CreateAssignmentTicket :one
INSERT INTO assignment_tickets (
  material_id, 
  student_id, 
  mentor_id, 
  score
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, material_id, student_id, mentor_id, score
`

type CreateAssignmentTicketParams struct {
	MaterialID int64         `json:"material_id"`
	StudentID  int64         `json:"student_id"`
	MentorID   sql.NullInt64 `json:"mentor_id"`
	Score      sql.NullInt32 `json:"score"`
}

func (q *Queries) CreateAssignmentTicket(ctx context.Context, arg CreateAssignmentTicketParams) (AssignmentTicket, error) {
	row := q.db.QueryRowContext(ctx, createAssignmentTicket,
		arg.MaterialID,
		arg.StudentID,
		arg.MentorID,
		arg.Score,
	)
	var i AssignmentTicket
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.StudentID,
		&i.MentorID,
		&i.Score,
	)
	return i, err
}

const deleteAssignmentTicket = `-- name: DeleteAssignmentTicket :exec
DELETE FROM assignment_tickets
WHERE id = $1
`

func (q *Queries) DeleteAssignmentTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAssignmentTicket, id)
	return err
}

const getAssignmentTicket = `-- name: GetAssignmentTicket :one
SELECT id, material_id, student_id, mentor_id, score FROM assignment_tickets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAssignmentTicket(ctx context.Context, id int64) (AssignmentTicket, error) {
	row := q.db.QueryRowContext(ctx, getAssignmentTicket, id)
	var i AssignmentTicket
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.StudentID,
		&i.MentorID,
		&i.Score,
	)
	return i, err
}

const listAssignmentTickets = `-- name: ListAssignmentTickets :many
SELECT id, material_id, student_id, mentor_id, score FROM assignment_tickets
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListAssignmentTicketsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAssignmentTickets(ctx context.Context, arg ListAssignmentTicketsParams) ([]AssignmentTicket, error) {
	rows, err := q.db.QueryContext(ctx, listAssignmentTickets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssignmentTicket
	for rows.Next() {
		var i AssignmentTicket
		if err := rows.Scan(
			&i.ID,
			&i.MaterialID,
			&i.StudentID,
			&i.MentorID,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssignmentTicket = `-- name: UpdateAssignmentTicket :one
UPDATE assignment_tickets 
SET 
  material_id = $2, 
  student_id = $3,
  mentor_id = $4,
  score = $5

WHERE id = $1
RETURNING id, material_id, student_id, mentor_id, score
`

type UpdateAssignmentTicketParams struct {
	ID         int64         `json:"id"`
	MaterialID int64         `json:"material_id"`
	StudentID  int64         `json:"student_id"`
	MentorID   sql.NullInt64 `json:"mentor_id"`
	Score      sql.NullInt32 `json:"score"`
}

func (q *Queries) UpdateAssignmentTicket(ctx context.Context, arg UpdateAssignmentTicketParams) (AssignmentTicket, error) {
	row := q.db.QueryRowContext(ctx, updateAssignmentTicket,
		arg.ID,
		arg.MaterialID,
		arg.StudentID,
		arg.MentorID,
		arg.Score,
	)
	var i AssignmentTicket
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.StudentID,
		&i.MentorID,
		&i.Score,
	)
	return i, err
}
