// Code generated by sqlc. DO NOT EDIT.
// source: mentor.sql

package db

import (
	"context"
)

const createMentor = `-- name: CreateMentor :one
INSERT INTO mentors (
  email, 
  name
) VALUES (
  $1, $2
)
RETURNING id, email, name, joined_at
`

type CreateMentorParams struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

func (q *Queries) CreateMentor(ctx context.Context, arg CreateMentorParams) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, createMentor, arg.Email, arg.Name)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.JoinedAt,
	)
	return i, err
}

const deleteMentor = `-- name: DeleteMentor :exec
DELETE FROM mentors
WHERE id = $1
`

func (q *Queries) DeleteMentor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMentor, id)
	return err
}

const getMentor = `-- name: GetMentor :one
SELECT id, email, name, joined_at FROM mentors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMentor(ctx context.Context, id int64) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, getMentor, id)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.JoinedAt,
	)
	return i, err
}

const listMentors = `-- name: ListMentors :many
SELECT id, email, name, joined_at FROM mentors
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListMentorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMentors(ctx context.Context, arg ListMentorsParams) ([]Mentor, error) {
	rows, err := q.db.QueryContext(ctx, listMentors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mentor
	for rows.Next() {
		var i Mentor
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMentor = `-- name: UpdateMentor :one
UPDATE mentors 
SET 
  name = $2
WHERE id = $1
RETURNING id, email, name, joined_at
`

type UpdateMentorParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateMentor(ctx context.Context, arg UpdateMentorParams) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, updateMentor, arg.ID, arg.Name)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.JoinedAt,
	)
	return i, err
}
