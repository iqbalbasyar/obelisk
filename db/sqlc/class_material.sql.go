// Code generated by sqlc. DO NOT EDIT.
// source: class_material.sql

package db

import (
	"context"
)

const createClassMaterial = `-- name: CreateClassMaterial :one
INSERT INTO class_materials (
  material_id, 
  class_id
) VALUES (
  $1, $2
)
RETURNING id, material_id, class_id
`

type CreateClassMaterialParams struct {
	MaterialID int64 `json:"material_id"`
	ClassID    int64 `json:"class_id"`
}

func (q *Queries) CreateClassMaterial(ctx context.Context, arg CreateClassMaterialParams) (ClassMaterial, error) {
	row := q.db.QueryRowContext(ctx, createClassMaterial, arg.MaterialID, arg.ClassID)
	var i ClassMaterial
	err := row.Scan(&i.ID, &i.MaterialID, &i.ClassID)
	return i, err
}

const deleteClassMaterial = `-- name: DeleteClassMaterial :exec
DELETE FROM class_materials
WHERE id = $1
`

func (q *Queries) DeleteClassMaterial(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClassMaterial, id)
	return err
}

const getClassMaterial = `-- name: GetClassMaterial :one
SELECT id, material_id, class_id FROM class_materials
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClassMaterial(ctx context.Context, id int64) (ClassMaterial, error) {
	row := q.db.QueryRowContext(ctx, getClassMaterial, id)
	var i ClassMaterial
	err := row.Scan(&i.ID, &i.MaterialID, &i.ClassID)
	return i, err
}

const listClassMaterials = `-- name: ListClassMaterials :many
SELECT id, material_id, class_id FROM class_materials
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListClassMaterialsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClassMaterials(ctx context.Context, arg ListClassMaterialsParams) ([]ClassMaterial, error) {
	rows, err := q.db.QueryContext(ctx, listClassMaterials, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClassMaterial
	for rows.Next() {
		var i ClassMaterial
		if err := rows.Scan(&i.ID, &i.MaterialID, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClassMaterial = `-- name: UpdateClassMaterial :one
UPDATE class_materials 
SET 
  material_id = $2,
  class_id = $3
WHERE id = $1
RETURNING id, material_id, class_id
`

type UpdateClassMaterialParams struct {
	ID         int64 `json:"id"`
	MaterialID int64 `json:"material_id"`
	ClassID    int64 `json:"class_id"`
}

func (q *Queries) UpdateClassMaterial(ctx context.Context, arg UpdateClassMaterialParams) (ClassMaterial, error) {
	row := q.db.QueryRowContext(ctx, updateClassMaterial, arg.ID, arg.MaterialID, arg.ClassID)
	var i ClassMaterial
	err := row.Scan(&i.ID, &i.MaterialID, &i.ClassID)
	return i, err
}
