// Code generated by sqlc. DO NOT EDIT.
// source: class.sql

package db

import (
	"context"
)

const createClass = `-- name: CreateClass :one
INSERT INTO class (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateClass(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass, name)
	var i Class
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM class
WHERE id = $1
`

func (q *Queries) DeleteClass(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClass, id)
	return err
}

const getClass = `-- name: GetClass :one
SELECT id, name FROM class
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClass(ctx context.Context, id int64) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i Class
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listClass = `-- name: ListClass :many
SELECT id, name FROM class
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListClassParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClass(ctx context.Context, arg ListClassParams) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, listClass, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClass = `-- name: UpdateClass :one
UPDATE class 
SET 
  name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateClassParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, updateClass, arg.ID, arg.Name)
	var i Class
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
